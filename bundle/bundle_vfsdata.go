// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package bundle

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// go:generate vfsgendev -source="Ghosting/bundle".Bundle
var Bundle = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 13, 10, 32, 15, 177133400, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 13, 10, 32, 15, 178000000, time.UTC),
			uncompressedSize: 1084,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x54\xc1\x6e\xdb\x30\x0c\xbd\x07\xc8\x3f\xb0\x3a\xb5\xc0\x6c\x27\xb7\x1d\xac\x00\x43\xb6\xee\xb8\x1d\x5a\x60\xdd\x4d\x91\x98\x88\xad\x2c\x69\x12\xed\x2c\xfd\xfa\xc1\x72\x52\x34\x6d\x0a\xec\x64\x89\x4f\xef\xf1\x51\x22\xdd\x5e\x7d\xfd\xb1\xbe\x7b\xf8\xf9\x0d\x2c\x77\x6e\x35\x9f\xb5\xe3\x17\x9c\xf2\x3b\x29\xd0\x8b\xd5\x7c\x36\xc6\x50\x99\xd5\x7c\x06\x00\xd0\x76\xc8\x0a\xb4\x55\x29\x23\x4b\x71\x7f\x77\x5b\x7d\x16\x67\x98\x57\x1d\x4a\x31\x10\xee\x63\x48\x2c\x40\x07\xcf\xe8\x59\x8a\x3d\x19\xb6\xd2\xe0\x40\x1a\xab\xb2\xf9\x04\xe4\x89\x49\xb9\x2a\x6b\xe5\x50\x2e\xeb\xc5\xb9\x96\x65\x8e\x15\xfe\xe9\x69\x90\xe2\x57\x75\xff\xa5\x5a\x87\x2e\x2a\xa6\x8d\xc3\x57\xc2\x84\x12\xcd\x0e\x27\xb3\x85\xec\xc8\x3f\x41\x42\x27\x45\xe6\x83\xc3\x6c\x11\x59\x80\x4d\xb8\x95\xa2\x6e\x4a\xac\xd6\x39\xbf\x62\x30\xb1\xc3\xd5\x77\x1b\x32\x93\xdf\xb5\xcd\xb4\x9f\xcf\xda\xe6\x58\xfc\x7c\xd6\x6e\x82\x39\x9c\xec\x19\x1a\x80\x8c\x14\x47\x13\x95\xa1\xe1\x64\xfd\x0c\xdf\x86\xd4\xbd\x05\xcb\x01\xbb\x7c\x95\xcd\x2e\x5f\x9c\x5c\x56\x38\xa6\x79\xab\x52\x0e\xc6\xd5\x6f\x8a\x70\x08\x7d\x82\x3d\x6e\x20\xa6\xf0\x88\x9a\x41\x79\x03\x7d\x74\x41\x19\x20\x06\x8b\x09\x6b\x78\x08\x3d\xec\xc9\x39\x48\xa8\x91\x06\x04\x05\xe5\xaa\x38\x4c\xfc\xd1\x10\x1a\xc8\xc4\x78\xd5\x36\xf1\x52\xb6\xd1\x0e\xa0\xd7\x7c\x88\x28\x45\xd7\x3b\xa6\xa8\x12\x37\x53\xa1\x8a\xd5\x25\x8f\xd3\xa3\xa8\x0d\x3a\xd8\x86\x24\xc5\x33\x45\xb1\x5a\xdb\x10\x32\x42\xfd\x4c\xb1\x6d\x0a\xf8\x11\x93\x7c\xec\x19\xa6\x8c\x5b\x1a\xdf\x7e\x6a\xb2\x51\xa6\xdc\x51\x59\x28\xad\x31\xb2\x14\x75\xd9\x05\xaf\xad\xf2\xbb\x23\x63\x5d\xd6\xd7\x37\x02\xb4\x53\x39\x4b\x41\x7e\xa0\x5c\xfa\xe8\xa3\xa4\x31\x85\x5d\xc2\x9c\xa1\x53\x7f\xa5\x58\x2e\x16\x02\x06\xe5\x7a\x94\x62\x71\x49\xa5\x6d\x4e\x84\xff\xa9\x62\xd3\x33\x07\x3f\x99\xcf\xfd\xa6\x23\x7e\x51\xbf\x2f\x6f\x56\x0a\x70\xa4\x9f\x4e\xf8\x6d\x48\xdd\xf5\xcd\xc5\x06\x28\x77\xff\xbe\x81\x1a\x43\xc3\x59\xf4\x14\x79\x8f\xb6\x59\x27\x8a\x0c\x39\xe9\x71\x40\x3a\x45\xbe\x7e\xcc\x63\x51\x13\x50\x06\xe1\xd8\xfe\x65\x26\xc6\x9f\xc5\xbf\x00\x00\x00\xff\xff\x6f\xb9\x02\x74\x3c\x04\x00\x00"),
		},
		"/main.js": &vfsgen۰CompressedFileInfo{
			name:             "main.js",
			modTime:          time.Date(2019, 5, 13, 10, 12, 0, 64045600, time.UTC),
			uncompressedSize: 1269,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x53\x5f\x6b\xdb\x3e\x14\x7d\x0f\xe4\x3b\xdc\xea\x49\xfe\x51\x9c\xfc\x5e\x37\xdc\x41\xb6\x8e\x0d\xda\xad\xac\x65\x0c\x4a\x1f\x14\xfb\xc6\x31\xc8\x92\x76\x75\x95\x2d\x2b\xf9\xee\x43\xb6\x92\x25\x76\x56\x58\x1e\x22\x45\xf7\x9c\x73\xff\x9c\x1b\x8f\xbc\x08\xcc\xd6\x5c\x1b\xb5\xd4\x58\xc9\x95\xd2\x1e\xb3\xe9\x64\x3a\x59\x05\x53\x72\x63\x0d\x8c\x30\xd8\x9f\x19\x3c\x4f\x27\x00\x00\x95\x2d\x43\x8b\x86\xf3\x1a\xf9\x5a\x63\xbc\x2e\xb6\x1f\x2b\x29\x7c\x58\xb6\x0d\x8b\x2c\xaf\x1a\xdf\x51\xa0\x80\x8b\xc4\x9e\x4e\x76\xc3\x2c\x77\x64\x6b\x42\xef\x17\x8a\xbe\x36\xbe\x59\x6a\x94\x9b\xfe\x3c\xa4\x2a\xad\xf1\x0c\x8e\x6c\x0d\xc5\xb9\xbc\x7e\xb1\x7d\x50\xf5\x27\xd5\xa2\x14\x2e\xc9\x89\xec\x71\xfe\xd4\xd3\x93\x1c\xbc\xe9\x24\xf2\x52\x2b\xef\x6f\x1a\xcf\x39\x61\x6b\x37\x28\x45\x63\x12\x44\x64\xf0\x6a\x08\x52\x55\x75\x82\x78\xa1\x05\xe9\x90\x4a\x34\xfc\xd2\x8c\xfe\x5a\x6b\xbe\x51\x3a\x20\x14\x90\x44\x86\x79\x56\x8d\xc6\xb7\x6b\x65\x6a\x94\x19\x3c\x47\xf5\xe3\xe1\xc4\xe8\xf9\xe1\xf4\xa6\xfc\x6a\x9c\xc8\xf2\x88\xf2\x8f\xf3\xa7\xd7\x7f\xa8\x56\x63\xae\x6d\x2d\x63\x28\xe7\xad\xeb\xd7\x20\x46\x47\x1b\xc0\x14\x62\x34\xc5\x0e\x4d\xcf\xc7\x6f\x47\x5e\x26\xd2\x60\x66\xdd\x8a\xbc\xb7\xd4\xca\x81\xc9\xff\xd6\x47\xcf\xec\xbf\x9b\x15\xc8\x8b\x18\x38\x28\xc6\x0f\x21\x07\x32\xfd\xef\xdd\xbe\xb3\xd9\x0c\x16\xa1\xd1\x15\xf0\x1a\x61\x65\xa9\x3d\xa9\xc0\x52\x0b\x05\x18\xfc\x01\xb1\xc0\x77\x8a\x95\x4c\x1d\xc6\x50\xae\x9c\x43\x93\x2a\xb9\xec\xea\xcd\xce\xea\x12\x7e\x0f\xe8\xf9\x58\x3a\x3d\x25\xf5\x6f\xb7\x37\x1f\x98\xdd\x97\xfe\x71\x9f\x23\x61\x72\x6b\x90\xc8\x12\x14\x80\x44\x50\x5c\x9d\x98\x85\x44\x23\xf8\x7e\x99\xe2\x06\x75\xff\x94\xab\x13\x97\x6e\x15\xaf\x73\xb2\xc1\x54\xb2\x5b\x70\xb6\xac\xf4\xac\xbb\x6a\xab\x2a\xac\xe0\x3f\xf8\x7f\x3e\xcf\x46\xba\x6a\x69\x29\x96\x2c\xb3\x61\x15\xe2\xbe\xb3\x11\x4a\x65\x4a\xd4\x1a\x2b\x31\x22\x47\xe9\xb3\xdc\x3d\x84\xd0\x3b\x6b\x3c\x3e\xe0\x4f\x3e\x9e\xe3\x3d\x9a\x33\x63\x3c\x08\x3b\x34\x52\xdc\x7d\xbe\x7f\x10\x97\x20\x66\xc1\xc5\x3c\xc3\xec\x3e\xda\x14\x2d\xeb\x74\x77\xbf\x03\x00\x00\xff\xff\xf0\x80\x8c\xf3\xf5\x04\x00\x00"),
		},
		"/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2019, 5, 13, 9, 1, 47, 433944600, time.UTC),
			uncompressedSize: 2063,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xdd\x6a\xdb\x30\x14\xbe\x0f\xe4\x1d\x0e\x94\xd1\x96\xc5\xa9\xe3\x36\x2b\x53\x18\xdb\xee\x76\xbf\x27\x90\x2d\xd9\x3e\xab\x2c\x09\xe9\x38\x71\x5a\xf6\xee\xc3\x3f\x4a\xed\xfc\xd0\xb1\xed\x66\x50\xda\xf2\x9d\xff\xef\x7c\x47\xfe\x82\x95\x35\x8e\xa0\x76\xea\xe6\xba\x24\xb2\x9e\xdd\xdd\xe5\x46\x93\x5f\x16\xc6\x14\x4a\x72\x8b\x7e\x99\x99\xea\x2e\xf3\xfe\x73\xce\x2b\x54\xfb\x4f\xdf\x15\x4f\xcd\xfb\xe4\xd1\x36\xd7\xb7\x9b\xf9\x6c\x3e\x2b\xa9\x52\xf0\x32\x9f\x01\x00\xb4\xc1\x51\xef\xc8\xe0\xba\x73\x85\xce\x75\x01\x5f\x1d\x72\xb5\x80\x6f\x52\x6d\x25\x61\xc6\x17\xe0\xb9\xf6\x91\x97\x0e\xf3\x4d\x1f\x5d\x4a\x2c\x4a\x62\xb0\x8a\xe3\x77\x03\xb4\x43\x41\xe5\x01\xf9\xd9\xd6\x4b\x8d\xd8\x87\x7a\x15\x77\x05\x6a\x06\xf1\xe0\x6e\xb9\x10\xa8\x8b\x57\x60\x1a\x7f\xa1\x88\xd9\x4a\x97\x2b\xb3\x63\x50\xa2\x10\x52\x0f\x70\xca\xb3\xa7\xc2\x99\x5a\x0b\x06\x57\xb9\xf8\xf8\xe1\xe1\x21\xf4\x70\x95\x19\x4d\x52\x53\x24\x70\x1b\x7a\x39\x93\x58\xa0\xb7\x8a\xef\x19\xe4\x4a\x36\x03\xd6\xfe\xcb\x20\x86\x15\xac\xe3\xd8\x8e\xd1\x48\xa0\x93\x19\xa1\xd1\x0c\x9c\xd9\x0d\x96\x1f\xb5\x27\xcc\xf7\xd1\x50\x91\x41\x26\x35\x49\x37\x58\xb9\xc2\x42\x47\x48\xb2\xf2\x23\x4b\xdf\x63\x6e\x5c\x35\x6e\x70\xe0\x62\x5c\xf6\xc0\x1f\x24\xaf\xe0\x78\xee\x5d\x89\x24\x03\x6e\x9c\x90\x2e\x72\x5c\x60\xed\xdb\x39\x0f\x11\xd1\x4e\xa6\x4f\x48\x51\x6a\x9a\xc8\x97\x5c\xb4\x54\xae\xee\x6d\xd3\xff\xba\x8f\x6d\x03\xd1\x2a\xb1\x0d\xb8\x22\xe5\x37\xf1\x02\x86\x9f\xe5\xe3\xfa\x36\xa4\xa8\xcc\xf3\xdf\xc4\xff\x61\x68\xc7\x54\xb9\xba\xa4\xa7\x89\x04\x64\x7a\x9f\xae\xf9\x60\xc9\x8c\x32\x6e\xca\xcf\x41\x7c\x2d\x33\xed\x86\xdb\x3f\x63\x5e\x7b\xfe\xc8\xd8\x48\xc9\x9c\xce\x11\x39\x72\x71\xad\x9a\x8e\x7d\x46\x8b\x1d\xf4\xf0\x72\x54\x3b\x19\x39\xda\xe9\x58\x6d\xda\x7e\xb4\xce\xda\x66\x09\x0e\x97\x84\x3a\x96\x64\x66\x54\x5d\xe9\x4b\xaa\xec\xbc\x3d\x71\x47\x6f\x2b\x53\xf1\x54\xaa\x23\x55\x8e\xae\xa6\x27\x81\xc1\xd5\xc3\x9a\xf3\x3c\x01\x61\x88\xa4\x80\xe4\x98\xa5\x03\x37\xeb\x83\x65\xb2\x82\xe9\xa6\x86\x6c\x01\xac\x9d\x6f\x51\x6b\x70\x74\x4d\x24\x1b\x8a\xba\xc6\x8f\xce\xac\x53\x17\x3e\x77\xa9\x87\xea\xa9\x79\xe5\xd9\x99\xc2\x49\xef\x2f\x8f\x14\xde\x86\xe4\x8d\xb6\x82\xfe\x7a\x05\x85\xfc\xa8\x6d\x4d\x21\x79\x60\x27\xde\x9c\xee\x76\x34\x75\xf7\x12\x7b\x7c\x96\x0c\x50\x97\xd2\x21\x6d\xfe\xc5\x13\x7d\x9e\xb7\xc9\x99\x4c\x79\x3e\x3d\x93\xdf\xd8\xde\x7a\x7a\x38\xff\xef\xf3\xd2\x7d\x5d\x6a\x52\xa8\x25\x03\x6d\xb4\x9c\xac\x94\x95\xed\x97\x27\x2c\xf6\xdc\x94\xa8\x91\x90\xab\x4b\x43\x4c\xcd\xe7\x2d\x5d\xb9\xf9\x6c\x89\x7a\x8b\x1e\x53\x25\x4f\x6e\x3e\xf4\xf5\x2b\x00\x00\xff\xff\xd1\xf0\xcd\x65\x0f\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
		fs["/main.js"].(os.FileInfo),
		fs["/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
