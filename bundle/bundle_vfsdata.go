// Code generated by vfsgen; DO NOT EDIT.

// +build !dev

package bundle

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// go:generate vfsgendev -source="Ghosting/bundle".Bundle
var Bundle = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 5, 13, 15, 5, 27, 977270266, time.UTC),
		},
		"/index.html": &vfsgen۰CompressedFileInfo{
			name:             "index.html",
			modTime:          time.Date(2019, 5, 17, 19, 51, 18, 714438465, time.UTC),
			uncompressedSize: 1166,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xc1\x6e\xdb\x30\x0c\xbd\xe7\x2b\x58\x9d\x5a\x60\xb6\x93\xdb\x0e\x56\x80\x21\x5b\x77\xdc\x0e\x2d\xb0\xee\xa6\xc8\x4c\xc4\x56\x96\x34\x89\x76\x96\x7e\xfd\x20\xd9\x2b\xd2\x20\x01\xb6\x93\x45\x3d\x3d\xbe\x27\x8a\x74\x7b\xf3\xf9\xdb\xe6\xe1\xe9\xfb\x17\x30\xdc\xdb\xf5\xa2\xcd\x1f\xb0\xca\xed\xa5\x40\x27\xd6\x8b\x45\x6b\x50\x75\xeb\x05\x00\x40\xdb\x23\x2b\xd0\x46\xc5\x84\x2c\xc5\xe3\xc3\x7d\xf5\x51\x9c\x42\x4e\xf5\x28\xc5\x48\x78\x08\x3e\xb2\x00\xed\x1d\xa3\x63\x29\x0e\xd4\xb1\x91\x1d\x8e\xa4\xb1\x2a\xc1\x07\x20\x47\x4c\xca\x56\x49\x2b\x8b\x72\x55\x2f\xdf\xa5\x32\xcc\xa1\xc2\x5f\x03\x8d\x52\xfc\xa8\x1e\x3f\x55\x1b\xdf\x07\xc5\xb4\xb5\x78\x92\x97\x50\x62\xb7\xc7\xec\xb3\x50\x2d\xb9\x17\x88\x68\xa5\x48\x7c\xb4\x98\x0c\x22\x0b\x30\x11\x77\x52\xd4\x4d\xd9\xab\x75\x4a\x6f\xe7\x99\xd8\xe2\xfa\xab\xf1\x89\xc9\xed\xdb\x66\x8a\x17\x6d\x33\x5d\x7a\xd1\x6e\x7d\x77\x9c\x6d\x75\x34\x02\x75\x52\xcc\xe2\x55\x47\xe3\xec\xf8\x1d\xbc\xf3\xb1\x3f\xc3\x0a\x6e\x56\x27\x3a\x66\x35\x3b\xb8\x4c\x9f\x25\xce\x52\x94\x73\x61\xfd\x93\x02\x1c\xfd\x10\xe1\x80\x5b\x08\xd1\x3f\xa3\x66\x50\xae\x83\x21\x58\xaf\x3a\x20\x06\x83\x11\x6b\x78\xf2\x03\x1c\xc8\x5a\x88\xa8\x91\x46\x04\x05\xa5\x3e\xec\x27\x7e\x76\x83\x1d\x24\x62\xbc\x69\x9b\x70\x41\x2c\x9b\x01\x74\x9a\x8f\x01\xa5\xe8\x07\xcb\x14\x54\xe4\x66\xba\xa3\x62\x75\xc1\xe1\xf4\x0e\x6a\x8b\x16\x76\x3e\x4a\xf1\x4a\x41\xac\x37\xc6\xfb\x84\x50\xbf\x52\x68\x9b\x02\x5e\x21\x92\x0b\x03\xc3\xa4\xb7\xa3\xfc\xd6\x53\x4f\xe5\x2c\xa5\x3e\x65\xa1\xb4\xc6\xc0\x52\xd4\x25\xf2\x4e\x1b\xe5\xf6\x33\x63\x53\xd6\xb7\x77\x02\xb4\x55\x29\x49\x41\x6e\xa4\x54\xfa\xe6\x8a\x66\x28\x89\x31\x46\x1f\x2f\x91\x2e\x96\xe6\x84\x98\x45\xb3\xc9\xff\xe4\x46\xbf\x8f\x98\x12\xf4\xea\xb7\x14\xab\xe5\x52\xc0\xa8\xec\x80\x52\x2c\xaf\x24\x9a\x09\xff\x50\xb8\xed\xc0\xec\xdd\x54\xaf\x34\x6c\x7b\xe2\xb7\xe4\x8f\xa5\x47\x4a\xcd\x2c\xe9\x97\xbf\xf8\xbd\x8f\xfd\xed\xdd\xa5\x7e\x2b\x6f\x7d\xde\xac\x4d\x47\xe3\xc9\xde\x1c\x9f\x43\x6d\xd2\x91\x02\x43\x8a\x3a\x4f\x5f\xaf\xc8\xd5\xcf\x29\xdf\x65\x02\xf2\x9c\x4d\xf3\x95\x07\x2e\xff\x7e\xfe\x04\x00\x00\xff\xff\x04\x1a\xfe\x04\x8e\x04\x00\x00"),
		},
		"/main.js": &vfsgen۰CompressedFileInfo{
			name:             "main.js",
			modTime:          time.Date(2019, 5, 17, 19, 52, 8, 40867149, time.UTC),
			uncompressedSize: 1919,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x54\xc1\x6e\xdb\x30\x0c\xbd\xfb\x2b\x58\x9d\xec\x21\x50\xb2\xf3\xe0\x1e\xd2\xb5\x58\x81\x76\x0b\xd6\x62\x18\x50\xf4\xa0\xd8\x8c\x23\x40\x96\x34\x49\x6e\x97\x0e\xf9\xf7\x81\xb2\x93\xda\x6e\x12\x14\x9b\x2f\x36\x68\xf2\x3d\xea\x3d\x8a\x1e\xc3\xbc\x09\xc1\xe8\x4b\x2d\x96\x0a\xcb\x74\x25\x94\xc7\x2c\x49\x56\x8d\x2e\x82\x34\x1a\xde\x64\x60\xfb\xce\xe0\x4f\x02\x00\x50\x9a\xa2\xa9\x51\x07\x5e\x61\xb8\x54\x48\x9f\xf3\xcd\x75\x99\x32\xdf\x2c\x6b\x19\x58\xc6\x4b\xe9\x63\x05\xe4\x70\xd6\x15\x27\xdb\x21\xc3\x95\x54\x78\xad\x57\x66\xe1\x4c\xe5\xd0\xfb\x1f\xd2\xcb\xa5\x54\x32\x6c\xd2\x27\xfa\x54\xb8\xa3\x2b\x8c\xf6\x01\xac\x33\x15\xe4\x87\xb8\xfd\x7c\x73\x2f\xaa\xaf\xa2\xc6\x94\xd9\x0e\x8d\x65\x0f\xb3\xc7\x5e\xb5\x16\x35\x2e\x0e\x97\xb7\xad\xaf\xa4\x42\x4a\x62\x59\xac\x92\x2b\x18\xb7\x41\x0f\xc1\xf3\x42\x09\xef\x6f\xa4\x0f\xdc\x61\x6d\x9e\x30\x65\x52\x77\xb9\x5d\x35\x3d\x91\xf1\x1d\xb9\x5b\x40\xe5\xf1\x38\x87\x28\xcb\xf7\x11\x1c\x4c\xdc\x8e\x65\xbf\x74\xce\xb8\xd4\xaf\xcd\xf3\x04\x6a\xf4\x5e\x54\x23\x9d\xd1\xb9\x53\x3a\x21\xd5\xf7\x44\x22\xa4\xbe\x42\xe8\xdc\xbf\x1c\x7a\x58\x76\xf4\xcc\x94\x26\xb5\x46\x77\x8f\xbf\x03\xe4\xc0\xd8\xe1\x53\xee\x86\x2a\xb5\xe8\x0a\xd4\xe1\xc4\xe4\x1e\x9d\x1e\xfe\x24\x54\x83\x90\x43\x87\x31\xe0\xa0\x71\xb9\x58\x0b\x5d\x61\x3a\x94\x8f\x7e\x9c\xd2\xef\x45\x5a\x96\x71\xca\xf2\x0f\xb3\xc7\x4f\xc9\x5e\x48\x0a\xf1\xb0\xb1\x08\x67\x79\x0e\x4c\x58\xab\x64\x21\x88\x6c\x1a\x6b\x7a\x62\xed\x6d\x0c\xae\xc1\x09\xb0\x85\x42\xe1\x11\x8a\xb5\x31\x1e\x41\x00\x7f\x91\x36\x36\xc2\x8f\xc9\xbd\x47\x88\x77\x7f\x02\xac\xa7\xf1\x3b\xae\xc8\xc0\x83\x48\x44\xf1\x53\x08\x7d\x95\x95\x58\xa2\x6a\x25\x1e\x78\x79\xd1\xf5\xaf\x4d\x58\xa3\x8b\xb8\xac\xdf\xf1\x70\x27\xd1\xd9\xb3\xfe\xef\xbd\xe7\xb3\x41\xf8\xc4\x9e\x79\x85\xd8\x26\xc3\x09\x8a\x7b\xec\xca\xb8\xfa\xbf\xdc\x7d\x35\xf7\x8c\x42\x7d\x0b\x1d\x86\xc6\xe9\x1d\x37\xbd\xa6\x53\x98\x37\x52\x95\x10\xd6\x08\x2b\xe3\xea\x3e\xad\x71\x35\xe4\xa0\xf1\x19\xa8\xa9\xcf\x22\x88\xb4\x6d\x9c\xfe\x70\x61\x2d\xea\x8e\x7d\x12\x7b\xcc\x0e\x60\x3a\xfc\xd5\xa0\x0f\x3d\xd8\x2e\xd2\x21\xff\xbc\xbd\xf9\x12\x82\xfd\xde\x06\x3b\xfc\x2e\x85\x1b\x1d\x2f\x3e\xe4\xed\x7e\x38\x8f\x08\x46\x21\x57\xa6\x4a\xd1\xb9\x71\xf6\xee\x26\xd1\xf5\x89\x8b\xfb\x7c\x60\xd1\xad\x08\x6b\xee\x4c\xa3\xcb\x34\xae\xbb\x60\x82\x50\x30\x6d\x77\x9f\x32\xa2\xc4\x12\x3e\xc0\xc7\xd9\x2c\x1b\x03\x8b\xa5\x71\xd4\x71\x9a\x8d\xbb\x60\x77\xd1\x35\x28\x84\x2e\x50\x29\x2c\xd9\xb8\x96\x80\x0f\x96\xee\x52\x1c\x7a\x6b\xb4\x47\x9a\xc8\x57\x09\xef\x50\xbf\x55\x70\x8f\x6a\x51\xa7\x6c\xf1\xed\xee\x9e\x4d\x80\x4d\x1b\x4b\x24\x23\x66\x4f\xee\x90\x53\x59\x92\x6c\xff\x06\x00\x00\xff\xff\xaa\x3e\x43\xae\x7f\x07\x00\x00"),
		},
		"/style.css": &vfsgen۰CompressedFileInfo{
			name:             "style.css",
			modTime:          time.Date(2019, 5, 17, 19, 50, 57, 783503019, time.UTC),
			uncompressedSize: 2171,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x55\xdd\x6e\xa3\x3a\x10\xbe\xe7\x29\x46\x8a\x8e\xda\xea\x84\x94\xd0\xe6\x54\xc7\xd1\xd1\xd9\xbd\xdb\xfb\x7d\x02\x83\x07\x98\xad\xb1\x91\x6d\x12\xd2\x2a\xef\xbe\x02\x0c\x81\xfc\x74\xa5\xed\xd5\x4a\x55\xdb\xcc\xaf\xbf\x6f\xbe\x99\x7c\xa1\xb2\xd2\xc6\x41\x6d\xe4\xfd\x5d\xe1\x5c\x65\xd9\xe3\x63\xa6\x95\xb3\xab\x5c\xeb\x5c\x22\xaf\xc8\xae\x52\x5d\x3e\xa6\xd6\xfe\x9f\xf1\x92\xe4\xe1\xbf\xef\x92\x27\xfa\xef\xf8\xa5\x6a\xee\x1e\xb6\x41\x50\xb8\x52\xc2\x7b\x00\x00\xd0\x66\x86\x7d\x14\x83\xbb\x2e\x0e\xba\xb8\x25\x7c\x35\xc4\xe5\x12\xbe\xa1\xdc\xa1\xa3\x94\x2f\xc1\x72\x65\x43\x8b\x86\xb2\x6d\x97\x5c\x20\xe5\x85\x63\xb0\x8e\xa2\xbf\x7a\xcb\x9e\x84\x2b\x06\xc3\x31\x08\x12\x2d\x0e\xbe\x53\xc9\x4d\x4e\x8a\x41\xd4\x47\x56\x5c\x08\x52\xf9\xf8\x79\x96\x79\xbd\xb8\xde\xa1\xc9\xa4\xde\x33\x28\x48\x08\x54\xbd\x35\xe1\xe9\x6b\x6e\x74\xad\x04\x83\x45\x26\xfe\xfd\xe7\xf9\xb9\x6b\xbd\x48\xb5\x72\xa8\x5c\x28\x68\xe7\x9f\x70\x59\x52\x90\xad\x24\x3f\x30\xc8\x24\x36\xbd\xa9\xfd\x8f\x41\x04\x6b\xd8\x44\x51\x35\x31\x86\x82\x0c\xa6\x8e\xb4\x62\x60\xf4\xbe\x77\xfc\xa8\xad\xa3\xec\x10\xfa\x66\x0c\x52\x54\x0e\x4d\xef\xe4\x92\x72\x15\x92\xc3\xd2\x9e\x1c\xed\xd3\x32\x6d\xca\xc9\xbb\x3c\xf6\x49\xbf\x91\x2c\x88\x47\xdb\x14\xe8\xbe\x20\x87\xde\xac\x8d\x40\x13\x1a\x2e\xa8\xb6\x2d\xb6\x21\x3e\xdc\x63\xf2\x4a\x2e\x4c\x74\x13\xda\x82\x8b\x96\xb8\xf5\x53\xd5\xf4\xbf\x9e\xa2\xaa\x81\x70\x1d\x57\x0d\x98\x3c\xe1\xf7\xd1\x12\xfc\xcf\xea\x65\xf3\xe0\x2b\x94\xfa\xed\x13\xe9\xbf\x97\x79\x0c\x82\x62\x7d\x5d\x33\xb3\x51\x63\xf2\x94\x6c\x78\xef\x48\xb5\xd4\x66\xc6\xca\x28\xaf\x96\x8f\x76\x9a\xed\x9f\x09\x97\x3d\x69\x4e\x57\xa1\xc4\xcc\x5d\x61\x6f\x12\x61\x5a\xd5\x9c\x85\x8c\x53\xf4\x83\x7f\x9f\x77\x8d\x87\xa0\x6a\x86\xa4\x2d\xd7\xa1\x39\x06\x41\x9b\xed\x9d\x37\x54\x38\x15\x5c\xaa\x65\x5d\xaa\x1b\x9a\xeb\x82\xad\xe3\xc6\x7d\xac\x3b\xc9\x13\x94\x73\xcd\x9d\x56\xa1\x07\xcc\x60\xf1\xbc\xe1\x3c\x8b\x41\x68\xe7\x50\x40\x7c\x46\xc8\x48\xc3\x66\x70\xcc\xa8\x9e\xcd\xc3\x97\xf2\xb6\xda\xd8\xd6\x58\x69\x3a\x6d\x88\xc3\xc6\x85\xdd\x73\xe7\x9b\xd3\x49\x87\xde\xba\xb2\xbe\x71\xa2\x3d\xa3\x46\xe7\x06\xad\xbd\x85\x63\x58\xf2\xf8\xe6\x6b\x8e\x41\x40\xaa\xaa\x9d\xaf\x30\x00\x8f\xb6\x17\x93\x3a\x21\xea\xee\xa4\xa5\x37\x64\x40\xaa\x40\x43\x6e\xfb\xf9\xfb\x79\x95\x92\x99\xc8\x67\x04\x5e\x88\xfc\xd7\x23\xd9\xcc\x54\xff\x87\x5e\x84\xee\xf6\xd7\x4e\x92\x42\x06\x4a\x2b\x3c\x8d\x90\x15\xed\x97\x02\x30\xa5\xdd\xbd\x20\xcb\x13\x89\xe2\xe1\xfd\x26\x58\x52\xe4\x88\xcb\x1b\x58\x66\xde\xab\x8e\xb1\xed\xd0\x6b\x90\xd0\x64\x66\xb2\x95\x5f\x6e\xf8\xa1\x0b\x0f\x56\xa4\x76\x64\x29\x91\x78\xbe\xec\x23\x92\x45\x46\x12\x15\x2f\xf1\xec\xea\xc5\xfd\xe9\x1a\xa7\xda\xaf\xb5\x45\x99\x5d\xae\x7c\xa7\xc3\xbd\x97\x7e\xa2\xa5\xe8\x2b\xa3\x31\xda\xf8\xb2\xc3\x1a\x4c\x0f\xe7\xbc\xd5\xc7\x6d\x8e\x3f\x03\x00\x00\xff\xff\x7b\x34\xf2\x7c\x7b\x08\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/index.html"].(os.FileInfo),
		fs["/main.js"].(os.FileInfo),
		fs["/style.css"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
